# Base library: v0.0.1

mul = primop;

# Types
type Bool = True + False;
type Maybe a = Nothing + Just :a;
type List a = Nil + Cons :a * :(List a);
type Either a b = Left :a + Right :b;
type Person = Person :String * :String * :Int;

# Functions
id:a x:a = x;
id1 x = x;
f x:(List a) = x + 2;
g x = x ? True -> 1 | False -> 0;
fact n = n ?
    0 -> 1
  | otherwise -> n * fact(n-1);

f1  x = (x + 2) ? 4 -> True | otherwise -> False;

h x = x ?
    [] -> []
  | Cons (y ys) -> y ? 0 -> True | otherwise -> False;

v = <1,3, 3.4, 6>;
l = [2,3,4,5];
t = {"Hello", l, 1, 2.535};

map:(List b) f:(a->b) ls:(List a) = ls ?
    [] -> []
  | Cons (x xs) -> Cons (f x)  (map f xs);

(&&) 4 a b = a ?
    False -> False
  | True -> b ? True -> True | otherwise -> False;

m a b = a ? True -> (b ? True -> True) | otherwise -> False; # works with brackets

# m1 Nil = Nil;
# m1 Cons(x xs) = Cons (x xs);

# trying typeclasses
class Functor f = 
  fmap:(f b) g:(a->b) x:(f a);
  
