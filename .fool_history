:quit
:run
:load test.fool
:run
:quit
:run
:load test.fool
:run
:quit
:functions
:run asf
:load test.fool
:quit
:run asf
:load test.fool
:quit
:run asf
:run
:load test.fool
:quit
:run
:functions
:load test.fool
:quit
:run
:functions
:load test.fool
:quit
:vars
:functions
:load test.fool
:load test.fool
:load test.fool
:load test.fool
:load test.fool
:functions
:vars
:load test.fool
:load "test.fool"
:load "test.fool"
:load 'test.fool'
:load test.fool
:quit
:load test.hs
:load test
:quit
:quit
def binary* 4 (x y) x*y; 
def binary* 4 (x,y) x*y; 
def binary* (x,y) x*y; 
var t = <1,2,3,4,5>;
def fn2 (x) fn(x);
def fn2 (x) fn x;
def fn (x y z) x * y * z * 18;
:quit
:quit
square
:quit
def fn (x) x * x;
def fn (x y z) x * y * z * 18;
:quit
def fn (x y z) x * y * z * 18;
def fn (x y z) x +y + z;
def fn (x y) x +y;
:vars
var l = [1,2.3,4];
var l = < 1,2.3,4 >;
var l = < 1,2.3,4 >
var l = <1,2.3,4>
var l = [1,2.3,4]
:vars
var t = 27 * 3 - 14;
:vars
var x = 4;
:quit
let Y = 4 in x+4;
let x = 4 in x+4;
let x = 4 in 1;
let x = 4;
:quit
:exit
exit
extern printf(x);
<1,2,3>;
<1,2,3>
v =<1,3,2>;
v = <1,3,2>;
let v = <1,2,3> in 1;
let v = <1,2,3> in 1
let v = <1,2,3>
:functions
:vars
data F = {2;3};
data F = {2;3};
data F = {2;3};
data F = {2;3}
data F = {2;3;}
data F = 2;3;
data F = x,y,z :: int; a,b :: String
data F = 1;
