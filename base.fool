# Base library: v0.0.1

data Bool = True | False;
data Maybe a = Just a | Nothing;
data List a = Cell a (List a) | Nil;
data Either a b = Left a | Right b;

(&&) 4 a b =
  | a == False -> False
  | a == True ->
    | b == True -> True
    | b == False -> False;

(**) 2 x n =
  | n == 0 -> 1
  | n >  0 -> x * (x ** (n-1));

(&) x = read x;

fact n = if n == 0 then 1 else n * fact (n - 1);

square x = x * x;
quad x = square x * square x;
safeDiv x y = if y == 0 then Nothing else Just (x / y);
compare x y = if x < y then True else False;

fact' x =
  | x == 0 -> 1
  | x > 0 -> x * fact (x-1);

ackermann m n =
  | m == 0 -> n + 1
  | (m > 0) ->
    | (n == 0) -> ackermann (m - 1) 1
    | (n > 0)  -> ackermann (m - 1) (ackermann m (n-1));
