// below is a minimal definition of something we can work with - Nat and summation on it!
// let's implement it all the way!!! following the MVP principle - do not build wheels for a car,
// build a scooter first!

type Bool = { True, False };
type Nat = {
  Z,
  Succ (n:Nat)
};

function id (x:a):a = x;

function not (b:Bool) : Bool = {
    True -> False,
    False -> True
};

function plus (x:Nat,y:Nat):Nat = {
  plus (Z, x) -> x,
  plus (Succ(n), x) -> Succ (plus(n,x))  
};

action main = {
  one = Succ(Z),
  three = Succ(Succ(one)),
  res = plus(three,one),
  print# (res)
};