:q
:compile
:q
:compile
:q
:compile
:q
:compile
:q
:types
:type
:compile
:q
:compile
:q
:compile
:q
:compile
:compile
:q
:compile
:q
:compile
:q
:compile
:q
:compile
:q
:compile
:types
:q
:compile
:types
:q
:types
:t
:q
:types
:q
:q
:q
:c -d
:c
:q
:q
type Bool = True + False
:q
:q
l = <1,3,2>;
l = <1,3,2>
l = 4
type List a = Nil   +  Cons :a *   :String
type List a = Nil + Cons :a *   :String
type List a = Nil + Cons :a * :String
type List a = Nil + Cons :a * :(List a)
type List a = Nil + Cons :a *:(List a)
:q
type List a = Nil + Cons :a *:(List a)
type List a = Nil + Cons :a *:List a
:q
type List a = Nil + Cons :a *:List a
type List a = Nil + Cons :a *:String
type List a = Nil + Cons :a *:String;
type T = T + C
type T = T
type T = T :String *:Int
type T = T :String * :Int
type T = T :String :Int
type T = T :String
type T = T String
type List a = Nil + Cons :a * :String;
type List a = Nil + Cons :a * :String
type List a = Nil + Cons :a :String
type Maybe a = Nothing + Just :a
:q
type Maybe a = Nothing + Just :a
type Maybe a = Nothing + Just a
type Maybe a:Int = Nothing + Just a
type Maybe a:* = Nothing + Just a
type Maybe a = Nothing + Just a
type Maybe a = Nothing + Just :a
type A = A
:quit
:quit
:c -d
:quit
:c -d
:quit
:quit
:c -d
:quit
:quit
:c -d
:c
:quit
:quit
:quit
:c -d
:quit
main
