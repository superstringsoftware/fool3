:q
:c
:l test.fool 
:c
:l test.fool 
:c
:l test.fool 
:c
:c
:l test.fool 
:q
:c
:l test.fool 
:l test.fool 
:l test.fool 
:l test.fool 
:l test.fool 
:l test.fool 
:q
:c
:l test.fool 
:q
:c
:l test.fool 
:q
:c
:l test.fool 
:c
:l test.fool 
:l test.fool 
:l test.fool 
:l test.fool 
:q
:l test.fool 
:l test.fool 
:q
:l test.fool 
:l test.fool 
:q
:q
:l test.fool 
:q
:l test.fool 
:q
:l test.fool 
:q
:l test.fool 
:q
:l test.fool 
:q
:l test.fool 
:l test.fool 
:l test.fool 
:l test.fool 
:l test.fool 
:q
:l test.fool 
:q
:l test.fool 
:q
:l test.fool 
:l test.fool 
:q
:c
map f lst:(List a) = Cell (f lst)
:c
map f lst = Cell (f lst)
map f lst = Cell (f lst.0)
map f lst = Cell (f lst.0) (map f lst.1)
:c
f x:Int y:Int = x+y
Maybe Int
:c
x = Cell 3 (Cell 2 (Cell 1 Nil))
:c
x = Cell 4 (Cell 1 Nil)
f "hello" = t 8
fmap square t
:c
fmap f x = if (cons x) == Just then Just (f x) else Nothing
f 1
f x = Just x
safeDiv 4 2
safeDiv 4 / 2
:set pretty
:q
ls
val 3
:c
:l test1.fool 
:set pretty
:q
f 2
:set strict
f 2
f x = square (square (square x))
f 2
f = square (square (square x))
f 2
:set lazy
