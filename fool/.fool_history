:q
:q
:q
:clm
:q
:q
saf
:q
:list constructors -d
:list constructors
:list functions
:list types
:types
:a -d
:a
:q
:clm
:q
eq (n1,n3)
eq (n3,n1)
eq (n1,n1)
eq (n3,n3)
plus(n3,n1)
plus(n1,n3)
n1
n3
n3 = Succ(Succ(Succ(Z)))
n1 = Succ(Z)
eq(False,False)
eq(False,False)
eq(False,Fals)
eq(True,True)
eq(True,False)
two
two = Succ(Succ(Z))
t
t = Succ(Z)
:q
eq(two,t)
eq(t,two)
eq(t,two)
eq(two,t)
eq(two,two)
eq(t,t)
eq(two,t)
:set trace on
two
t
eq(two,t)
eq(two,two)
two = Succ(Succ(Z))
eq(t,t)
t = Succ(Z)
not(x)
x
x = True
:e
:q
:q
plus(four,two)
:set trace on
plus(four,two)
four
four = Succ(Succ(Succ(Succ(Z))))
two
two = Succ(Succ(Z))
:q
plus(t1,t1)
t1
t1 = Succ(Succ(Succ(Z)))
plus(t,t)
t = Succ(Z)
:q
plus(t,t)
t
t = Succ(Z)
:set trace on
:q
plus(t,t)
:set trace on
plus(t,t)
t
t = Succ(Z)
:q
plus(t,t)
t = Succ(Z)
:q
plus(t,t)
t = Succ(Z)
:q
eq(t,t)
t
t = Succ(Z)
:q
plus(t,t)
t
t = Succ(Z)
:q
:clm
:q
