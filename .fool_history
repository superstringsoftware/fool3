:quit
:core
tert 4
fact 4
:load test1.fool
:quit
fact 4
:load test1.fool
:quit
fact 4
:load test1.fool
2+2
:quit
:quit
:quit
:quit
:core
:types
:functions
:vars
asfa
:core
:load test1.fool
:vars
:quit
:core
compare 4 2
compare 1 2
fn 1 2
:load test1.fool
:quit
fn 1 2
fn 1 2 3
fn 1 2
(fn 1) 2;
(fn 1) 2
fn 1
fn 1 2
compare 1 2
compare 1
tert 18
tert 4
if (2<1) then 3 else 4
fact 3
compare 1 2
:core
:load test1.fool
:quit
fact 15
fact 3
fact 10
fact 2
fact 1
fact 0
fact 2
if (1==1) then 5+5 else 9-3
:core
:load test1.fool
:quit
3 == (2 +9)
3 == 3
3 == 4
2+2
:load test1.fool
fact 4
quadr 4
:core
tert 4
:load test1.fool
:quit
tert 4
square 4
:load test1.fool
tert 4
square 4
:core
fn1 = fn 2
fn 2
fn 1 2
:core
:load test1.fool
3-2
2+2
:quit
3-1
2+2
fact 0
:core
:load test1.fool
succ 0
:core
:all
:core
:load test1.fool
:quit
tert 4
tert y
:load test1.fool
quadr 2
:core
