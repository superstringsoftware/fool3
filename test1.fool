fn x y = x + y;

tx = True;
compare x y = if x < y then True else False;

longf a b c d = compare a b c d + False;

val x = Cell 4 (Cell x Nil);

t = 100;

folded f = map f (val 7);

vec = <1,2,3,4>;

data Bool = True | False;
data List a = Cell a (List a) | Nil;
data Maybe a = Just a | Nothing;
data Silly = Struct Int String Float;
data Either a b = Left a | Right b;
data Pair a b = Pair a b;

data Person = Person { name:String, age : Int, dob: Maybe Date, pm : List a} | Fun Int String | Weird;

# fact 0 = 1;
fact n = if n == 0 then 1 else n * fact (n - 1);
fuct n = let fn x = x ** 3, k = 4 in k + fn n;

fop x y = x ==-> (y + 15);

main = square 4;

square x = x * x;
quadr x = (square x) * (square x);
tert x = x * (square x);

succ x = succ succ x;

# testing product type construction
productDataTest = Person :*: (dob:Date) :*: 4;
sumDataTest = Person :+: (Maybe a) :+: (Cons a Int);
